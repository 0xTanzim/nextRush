{
  "NextRush Plugin Boilerplate": {
    "prefix": "nextrush-plugin",
    "body": [
      "/**",
      " * ${1:PluginName} Plugin - NextRush Framework",
      " * ${2:Plugin description}",
      " */",
      "",
      "import { Application } from '../../core/app/application';",
      "import { BasePlugin, PluginRegistry } from '../core/base-plugin';",
      "",
      "export class ${1:PluginName}Plugin extends BasePlugin {",
      "  name = '${1:PluginName}';",
      "",
      "  constructor(registry: PluginRegistry) {",
      "    super(registry);",
      "  }",
      "",
      "  install(app: Application): void {",
      "    ${3:// Plugin installation logic}",
      "  }",
      "",
      "  start(): void {",
      "    this.emit('${1/(.*)/${1:/downcase}/}:started');",
      "  }",
      "",
      "  stop(): void {",
      "    this.emit('${1/(.*)/${1:/downcase}/}:stopped');",
      "  }",
      "}"
    ],
    "description": "Create a new NextRush plugin with proper structure"
  },
  
  "NextRush Route Handler": {
    "prefix": "nextrush-route",
    "body": [
      "app.${1|get,post,put,delete,patch,head,options|}('${2:/path}', (req: NextRushRequest, res: NextRushResponse) => {",
      "  ${3:// Route handler logic}",
      "  res.json({ ${4:data: 'response'} });",
      "});"
    ],
    "description": "Create a NextRush route handler"
  },
  
  "NextRush Context Route Handler": {
    "prefix": "nextrush-context-route",
    "body": [
      "app.${1|get,post,put,delete,patch,head,options|}('${2:/path}', (context: RequestContext) => {",
      "  ${3:// Context route handler logic}",
      "  context.response.json({ ${4:data: 'response'} });",
      "});"
    ],
    "description": "Create a NextRush context-style route handler"
  },
  
  "NextRush Middleware": {
    "prefix": "nextrush-middleware",
    "body": [
      "app.use((req: NextRushRequest, res: NextRushResponse, next: () => void) => {",
      "  ${1:// Middleware logic}",
      "  next();",
      "});"
    ],
    "description": "Create NextRush middleware"
  },
  
  "NextRush Context Middleware": {
    "prefix": "nextrush-context-middleware",
    "body": [
      "app.use((context: RequestContext, next: () => void) => {",
      "  ${1:// Context middleware logic}",
      "  next();",
      "});"
    ],
    "description": "Create NextRush context-style middleware"
  },
  
  "NextRush WebSocket Handler": {
    "prefix": "nextrush-ws",
    "body": [
      "app.ws('${1:/websocket}', (socket: NextRushWebSocket) => {",
      "  ${2:// WebSocket connection logic}",
      "  ",
      "  socket.on('message', (data) => {",
      "    ${3:// Handle incoming message}",
      "  });",
      "  ",
      "  socket.on('close', () => {",
      "    ${4:// Handle connection close}",
      "  });",
      "});"
    ],
    "description": "Create NextRush WebSocket handler"
  },
  
  "NextRush Static Files": {
    "prefix": "nextrush-static",
    "body": [
      "app.static('${1:/public}', '${2:./public}', {",
      "  ${3:spa: true,}",
      "  ${4:maxAge: 3600000}",
      "});"
    ],
    "description": "Create NextRush static file serving"
  },
  
  "NextRush Template Rendering": {
    "prefix": "nextrush-render",
    "body": [
      "app.get('${1:/template}', (req: NextRushRequest, res: NextRushResponse) => {",
      "  res.render('${2:template.html}', {",
      "    ${3:title: 'NextRush',}",
      "    ${4:data: req.params}",
      "  });",
      "});"
    ],
    "description": "Create NextRush template rendering route"
  },
  
  "NextRush App Creation": {
    "prefix": "nextrush-app",
    "body": [
      "import { createApp } from 'nextrush';",
      "",
      "const app = createApp();",
      "",
      "${1:// Configure middleware}",
      "app.usePreset('${2|development,production,fullFeatured|}');",
      "",
      "${3:// Define routes}",
      "app.get('/', (req, res) => {",
      "  res.json({ message: 'Hello NextRush!' });",
      "});",
      "",
      "${4:// Start server}",
      "const PORT = process.env.PORT || 3000;",
      "app.listen(PORT, () => {",
      "  console.log(`Server running on port ${PORT}`);",
      "});"
    ],
    "description": "Create a complete NextRush application"
  },
  
  "NextRush Error Handler": {
    "prefix": "nextrush-error",
    "body": [
      "app.use((error: Error, req: NextRushRequest, res: NextRushResponse, next: () => void) => {",
      "  ${1:console.error('Error:', error);}",
      "  ",
      "  if (res.headersSent) {",
      "    return next(error);",
      "  }",
      "  ",
      "  res.status(${2:500}).json({",
      "    error: {",
      "      message: error.message,",
      "      ${3:stack: process.env.NODE_ENV === 'development' ? error.stack : undefined}",
      "    }",
      "  });",
      "});"
    ],
    "description": "Create NextRush error handling middleware"
  },
  
  "NextRush Preset Configuration": {
    "prefix": "nextrush-preset",
    "body": [
      "const ${1:customPreset} = {",
      "  name: '${1:customPreset}',",
      "  middleware: [",
      "    ${2:'cors',}",
      "    ${3:'helmet',}",
      "    ${4:'compression'}",
      "  ],",
      "  options: {",
      "    ${5:// Preset options}",
      "  }",
      "};",
      "",
      "app.usePreset(${1:customPreset});"
    ],
    "description": "Create custom NextRush middleware preset"
  },
  
  "NextRush Body Parser": {
    "prefix": "nextrush-body",
    "body": [
      "app.post('${1:/upload}', (req: NextRushRequest, res: NextRushResponse) => {",
      "  ${2:// Access parsed body}",
      "  const body = req.body;",
      "  ${3:const file = req.file('${4:fieldname}');}",
      "  ",
      "  res.json({",
      "    ${5:body,}",
      "    ${6:file: file?.filename}",
      "  });",
      "});"
    ],
    "description": "Create NextRush route with body parsing"
  }
}
