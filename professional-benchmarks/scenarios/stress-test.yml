# ðŸ”¥ Artillery Extreme Stress Testing Scenario
#
# This scenario pushes frameworks to absolute breaking point with:
# - Massive traffic spikes (up to 2000 RPS)
# - Extended high-load periods
# - Memory pressure simulation
# - CPU saturation testing
# - Connection exhaustion testing

config:
  target: "http://localhost:3000"
  phases:
    # Phase 1: Quick baseline (15 seconds)
    - duration: 15
      arrivalRate: 50
      name: "Baseline measurement"

    # Phase 2: Explosive ramp up (30 seconds)
    - duration: 30
      arrivalRate: 100
      rampTo: 1000
      name: "Explosive ramp up"

    # Phase 3: Extreme sustained load (120 seconds)
    - duration: 120
      arrivalRate: 1000
      name: "Extreme sustained load"

    # Phase 4: Breaking point spike (45 seconds)
    - duration: 45
      arrivalRate: 2000
      name: "Breaking point test"

    # Phase 5: Memory pressure test (60 seconds)
    - duration: 60
      arrivalRate: 1500
      name: "Memory pressure phase"

    # Phase 6: Recovery and resilience (45 seconds)
    - duration: 45
      arrivalRate: 1500
      rampTo: 200
      name: "Recovery resilience test"

  # Extreme HTTP settings for maximum stress
  http:
    timeout: 3
    pool: 500 # Very large connection pool

  # Extreme CPU and memory settings
  variables:
    extreme_payload_size: 20000
    massive_concurrent_requests: 100
    cpu_intensive_loops: 50

# Extreme stress test scenarios designed to break frameworks
scenarios:
  # CPU saturation scenario (35% of traffic)
  - name: "CPU saturation test"
    weight: 35
    flow:
      # Massive burst of rapid requests to saturate CPU
      - loop:
          - get:
              url: "/json"
        count: "{{ massive_concurrent_requests }}"

      # Complex parameter parsing with large numbers
      - get:
          url: "/users/{{ $randomInt(1, 100000) }}/posts/{{ $randomInt(1, 100000) }}"

      # Extremely heavy query processing
      - get:
          url: "/search"
          qs:
            q: "{{ $randomString(500) }}"
            page: "{{ $randomInt(1, 10000) }}"
            limit: "{{ $randomInt(100, 500) }}"
            sort: "{{ $randomString(200) }}"
            filter: "{{ $randomString(300) }}"
            data: "{{ $randomString(1000) }}"

      # Middleware chain stress
      - loop:
          - get:
              url: "/middleware-test"
        count: "{{ cpu_intensive_loops }}"

      # No delay - absolute maximum CPU pressure
      - think: 0

  # Memory exhaustion scenario (30% of traffic)
  - name: "Memory exhaustion test"
    weight: 30
    flow:
      # Extremely large payload POST requests
      - post:
          url: "/data"
          json:
            extreme_payload: "{{ $randomString(extreme_payload_size) }}"
            user_data:
              id: "{{ $randomInt(1, 1000000) }}"
              name: "{{ $randomString(500) }}"
              email: "{{ $randomString(200) }}@extremetest.com"
              bio: "{{ $randomString(2000) }}"
              metadata: "{{ $randomString(5000) }}"
            massive_array:
              - "{{ $randomString(2000) }}"
              - "{{ $randomString(2000) }}"
              - "{{ $randomString(2000) }}"
              - "{{ $randomString(2000) }}"
              - "{{ $randomString(2000) }}"
              - "{{ $randomString(2000) }}"
              - "{{ $randomString(2000) }}"
              - "{{ $randomString(2000) }}"

      # Memory pressure through rapid API calls
      - loop:
          - get:
              url: "/api/users/{{ $randomInt(1, 10000) }}"
          - post:
              url: "/api/users"
              json:
                name: "MemoryStress {{ $randomString(1000) }}"
                data: "{{ $randomString(2000) }}"
          - put:
              url: "/api/users/{{ $randomInt(1, 1000) }}"
              json:
                update: "{{ $randomString(1500) }}"
        count: 25

      # Garbage collection pressure
      - loop:
          - get:
              url: "/health"
        count: 50

      - think: 0

  # Connection saturation scenario (25% of traffic)
  - name: "Connection saturation test"
    weight: 25
    flow:
      # Parallel request bursts to exhaust connection pools
      - parallel:
          - get:
              url: "/"
          - get:
              url: "/json"
          - get:
              url: "/plaintext"
          - get:
              url: "/health"
          - post:
              url: "/data"
              json:
                connection_test: "{{ $randomString(1000) }}"
          - get:
              url: "/users/{{ $randomInt(1, 1000) }}/posts/1"
          - get:
              url: "/search?q=stress"
          - post:
              url: "/api/users"
              json:
                name: "ConnectionTest"

      # Keep-alive connection stress
      - loop:
          - get:
              url: "/json"
          - get:
              url: "/plaintext"
        count: 30

      # No delay for maximum connection pressure
      - think: 0

  # Error cascade and recovery scenario (10% of traffic)
  - name: "Error cascade and recovery test"
    weight: 10
    flow:
      # Generate cascading errors
      - loop:
          - get:
              url: "/error"
              expect:
                - statusCode: 500
        count: 5

      # Test recovery under pressure
      - loop:
          - get:
              url: "/health"
          - get:
              url: "/json"
          - post:
              url: "/data"
              json:
                recovery_test: true
        count: 10

      # Mixed error/success pattern under extreme load
      - loop:
          - get:
              url: "/{{ $randomInt(1, 5) === 1 ? 'error' : 'json' }}"
        count: 20

      - think: 0.01

# Extreme stress test expectations (very aggressive thresholds)
expect:
  # Extremely tight response time under breaking point load
  - expression: "response.time < 2000"
    as: "Response time under 2000ms during extreme stress"

  # Very strict server error rate (allow up to 3% under extreme load)
  - expression: "rate(response.status >= 500) < 0.03"
    as: "Server error rate under 3% during breaking point"

  # Client error tolerance
  - expression: "rate(response.status >= 400 && response.status < 500) < 0.01"
    as: "Client error rate under 1%"

  # Minimum throughput expectation under extreme load
  - expression: "rate(response.status == 200) > 800"
    as: "Success throughput above 800 RPS under extreme stress"
