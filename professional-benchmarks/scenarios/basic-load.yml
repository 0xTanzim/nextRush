# ðŸŽ¯ Artillery High-Performance Load Testing Scenario
#
# This scenario pushes frameworks to their limits with:
# - Aggressive warm up phase (high initial load)
# - Intensive ramp up phase (exponential growth)
# - Extreme sustained load phase (maximum throughput)
# - Stress recovery phase (testing resilience)

config:
  target: "http://localhost:3000"
  phases:
    # Phase 1: Aggressive Warm up (20 seconds)
    - duration: 20
      arrivalRate: 50
      name: "Aggressive warm up"

    # Phase 2: Explosive Ramp up (40 seconds)
    - duration: 40
      arrivalRate: 100
      rampTo: 500
      name: "Explosive ramp up"

    # Phase 3: Maximum sustained load (90 seconds)
    - duration: 90
      arrivalRate: 500
      name: "Maximum sustained load"

    # Phase 4: Spike test (20 seconds)
    - duration: 20
      arrivalRate: 1000
      name: "Traffic spike test"

    # Phase 5: Recovery test (30 seconds)
    - duration: 30
      arrivalRate: 1000
      rampTo: 100
      name: "Recovery phase"

  # High-performance HTTP configuration
  http:
    timeout: 5
    pool: 200 # Large connection pool

  # CPU and memory intensive settings
  variables:
    payload_size: 5000
    concurrent_bursts: 50

# High-intensity test scenarios designed to differentiate framework performance
scenarios:
  # CPU-intensive workflow (40% of traffic)
  - name: "CPU-intensive operations"
    weight: 40
    flow:
      # Burst of rapid requests to stress CPU
      - loop:
          - get:
              url: "/json"
        count: "{{ concurrent_bursts }}"

      # Complex parameter parsing
      - get:
          url: "/users/{{ $randomInt(1, 10000) }}/posts/{{ $randomInt(1, 10000) }}"
          capture:
            - json: "$.userId"
              as: "user_id"

      # Heavy query processing
      - get:
          url: "/search"
          qs:
            q: "{{ $randomString(200) }}"
            page: "{{ $randomInt(1, 1000) }}"
            limit: "{{ $randomInt(50, 200) }}"
            sort: "{{ $randomString(50) }}"
            filter: "{{ $randomString(100) }}"

      # No delay - maximum stress
      - think: 0.1

  # Memory pressure workflow (30% of traffic)
  - name: "Memory-intensive operations"
    weight: 30
    flow:
      # Large payload POST requests
      - post:
          url: "/data"
          json:
            large_payload: "{{ $randomString(payload_size) }}"
            user_data:
              id: "{{ user_id || $randomInt(1, 100000) }}"
              name: "{{ $randomString(100) }}"
              email: "{{ $randomString(50) }}@test.com"
              metadata: "{{ $randomString(1000) }}"
            array_data:
              - "{{ $randomString(500) }}"
              - "{{ $randomString(500) }}"
              - "{{ $randomString(500) }}"
              - "{{ $randomString(500) }}"
              - "{{ $randomString(500) }}"

      # Rapid API calls to stress memory allocation
      - loop:
          - get:
              url: "/api/users/{{ $randomInt(1, 1000) }}"
        count: 20

      # Middleware chain test
      - get:
          url: "/middleware-test"

      - think: 0.05

  # High-throughput mixed workflow (25% of traffic)
  - name: "High-throughput mixed operations"
    weight: 25
    flow:
      # Parallel requests to maximize concurrent load
      - parallel:
          - get:
              url: "/"
          - get:
              url: "/health"
          - get:
              url: "/plaintext"
          - post:
              url: "/api/users"
              json:
                name: "Benchmark User {{ $randomInt(1, 10000) }}"
                email: "bench{{ $randomInt(1, 10000) }}@test.com"

      # CRUD operations burst
      - loop:
          - get:
              url: "/api/users"
          - post:
              url: "/api/users"
              json:
                name: "Test {{ $randomInt(1, 1000) }}"
          - put:
              url: "/api/users/{{ $randomInt(1, 100) }}"
              json:
                name: "Updated User"
          - delete:
              url: "/api/users/{{ $randomInt(1, 100) }}"
        count: 5

      # No thinking time for maximum pressure
      - think: 0

  # Error handling and recovery (5% of traffic)
  - name: "Error handling stress test"
    weight: 5
    flow:
      # Generate errors to test error handling under extreme load
      - get:
          url: "/error"
          expect:
            - statusCode: 500

      # Recovery pattern
      - loop:
          - get:
              url: "/health"
          - get:
              url: "/json"
        count: 3

      # Mixed error/success to test resilience
      - get:
          url: "/{{ $randomInt(1, 10) <= 7 ? 'json' : 'error' }}"

      - think: 0.02

# Aggressive performance expectations for framework differentiation
expect:
  # Tighter response time thresholds to show differences
  - expression: "response.time < 500"
    as: "Response time under 500ms"

  # Very strict error rate (less than 0.5%)
  - expression: "rate(response.status >= 400) < 0.005"
    as: "Error rate under 0.5%"

  # Throughput expectations
  - expression: "rate(response.status == 200) > 400"
    as: "Success rate above 400 RPS"
