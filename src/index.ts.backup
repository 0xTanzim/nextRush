import { Application, Apexport { BodyParserComponent } from './components/body-parser/body-parser.component';
export { BuiltInMiddlewareComponent } from './components/builtin-middleware/builtin-middleware.component';
export { RequestEnhancerComponent } from './components/request-enhancer/request-enhancer.component';
export { StaticFilesComponent } from './components/static-files/static-files.component';
export { TemplateComponent } from './components/template/template.component';tionOptions } from './core/application';
import { Router } from './routing/router';
import { RouterOptions } from './types';

/**
 * NextRush Framework - Modern, fast, and testable Express.js alternative
 *
 * This is the main entry point for the NextRush framework.
 * It follows the principles of:
 * - Single Responsibility
 * - Dependency Injection
 * - Interface-based Design
 * - Testability
 * - Clear separation of concerns
 */

// Core exports - Application with all features restored
export { Application, type ApplicationOptions } from './core/application';

// Plugin System exports
export { PluginRegistry } from './core/plugin-registry';
export * from './plugins';

// Component exports - restored components
export { BodyParserComponent } from './components/body-parser/body-parser.component';
export { BuiltInMiddlewareComponent } from './components/builtin-middleware/builtin-middleware.component';
export { RequestEnhancerComponent } from './components/request-enhancer/request-enhancer.component';
export { StaticFilesComponent } from './components/static/static-files.component';
export { TemplateEngineComponent } from './components/template/template-engine.component';
export { WebSocketComponent } from './components/websocket/websocket.component';

// Middleware exports
export * from './utils/built-in';
export * from './utils/compose';
export * from './utils/presets';
export * from './utils/static-files';
export * from './utils/template-engine';

// Type exports
export type {
  AnyFunction,
  AsyncHandler,
  BodyParserOptions,
  Configurable,
  ContentType,
  DeepPartial,
  Dict,
  Disposable,
  // Express-style types (familiar API)
  ExpressHandler,
  ExpressMiddleware,
  // HTTP types
  HttpMethod,
  MiddlewareHandler,
  NextFunction,
  NextRushRequest,
  NextRushResponse,
  Optional,
  ParsedRequest,
  ParsedResponse,
  // Routing types
  Path,
  // Common types
  Primitive,
  RequestContext,
  RequestParsingOptions,
  ResponseOptions,
  Route,
  RouteBuilder,
  RouteHandler,
  RouteMatch,
  RouteMatcher,
  RouterOptions,
  SyncHandler,
} from './types';

// HTTP handling exports
export type { EnhancedRequest } from './core/request-enhancer';
export type { EnhancedResponse } from './core/response-enhancer';

// Routing exports
export {
  RouteManager,
  RouteMatcher as RouteMatcherClass,
  Router,
  type RouteManagerOptions,
  type RouteMatcherOptions,
} from './routing';

// Error handling exports
export {
  ErrorHandler,
  InternalServerError,
  MethodNotAllowedError,
  NextRushError,
  NotFoundError,
  PayloadTooLargeError,
  RequestTimeoutError,
  UnsupportedMediaTypeError,
  ValidationError,
  type ErrorHandlerConfig,
} from './errors';

// Utility exports
export {
  buildContentType,
  // Content type utilities
  CONTENT_TYPES,
  extractParamNames,
  getExtension,
  getMimeType,
  isContentType,
  isSafePath,
  isValidObject,
  joinPaths,
  matchPath,
  // Path utilities
  normalizePath,
  parseContentType,
  pathToRegExp,
  // Validation utilities
  validate,
  validateObject,
  ValidationRules,
  type ValidationResult,
  type ValidationRule,
} from './utils';

// Helper utilities
export * from './helpers';

// ðŸš€ WebSocket support (zero dependencies)
// Temporarily disabled - WebSocket support
// export {
//   enhanceApplicationWithWebSocket,
//   WebSocketIntegration,
//   WebSocketServer,
// } from './websocket';

// Temporarily disabled - WebSocket type exports
// export type {
//   ConnectionEvents,
//   NextRushWebSocket,
//   RoomEmitter,
//   RoomInfo,
//   TypedWebSocketEvents,
//   WebSocketCloseCode,
//   WebSocketHandler,
//   WebSocketMessage,
//   WebSocketMiddleware,
//   WebSocketOpcode,
//   WebSocketOptions,
//   WebSocketReadyState,
//   WebSocketStats,
// } from './types/websocket';

// Auto-initialize WebSocket support
// import { enhanceApplicationWithWebSocket } from './websocket';

// Enhance Application with WebSocket capabilities
// enhanceApplicationWithWebSocket();

/**
 * ðŸš€ Create NextRush Application with ALL FEATURES RESTORED
 *
 * This is the main factory function that creates a fully-featured NextRush app
 * with all the functionality that was accidentally removed.
 */
export function createApp(options: ApplicationOptions = {}): Application {
  return new Application(options);
}

/**
 * Create a new NextRush application (alias for createApp)
 */
export function createApplication(
  options: ApplicationOptions = {}
): Application {
  return new Application(options);
}

/**
 * Create a basic NextRush application without enhanced features
 */
export function createBasicApp(options: ApplicationOptions = {}): Application {
  return new Application(options);
}

/**
 * Create a new router instance
 */
export function createRouter(options?: RouterOptions): Router {
  return new Router(options);
}

// Default export - Application with all features restored
export default Application;
